import os
import sys
import requests
import re
import html
import tempfile
import io
import threading
import customtkinter as ctk
from tkinter import filedialog
from ebooklib import epub, ITEM_DOCUMENT, ITEM_IMAGE
from bs4 import BeautifulSoup
from PIL import Image, ImageFilter
from reportlab.lib.pagesizes import letter
from reportlab.platypus import (BaseDocTemplate, Frame, PageTemplate, Paragraph,
                                Spacer, NextPageTemplate, PageBreak, Image as ReportLabImage)
from reportlab.platypus.flowables import KeepInFrame
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.lib import colors
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
from reportlab.lib.enums import TA_LEFT, TA_CENTER, TA_JUSTIFY

# --- Helper function to find resources (icon, font) ---
def resource_path(relative_path):
    """ Get absolute path to resource, works for dev and for PyInstaller """
    try:
        # PyInstaller creates a temp folder and stores path in _MEIPASS
        base_path = sys._MEIPASS
    except Exception:
        base_path = os.path.abspath(".")

    return os.path.join(base_path, relative_path)

# --- Main Application Class ---
class EpubToPdfConverter(ctk.CTk):
    def __init__(self):
        super().__init__()

        # --- Window Setup ---
        self.title("Bek Bookstore EPUB to PDF Converter")
        self.geometry("800x560")
        
        # --- CRITICAL: Set Icon using resource_path ---
        icon_path = resource_path("icon.png")
        if os.path.exists(icon_path):
            self.iconbitmap(icon_path)
        
        self.grid_columnconfigure(0, weight=1)
        self.grid_rowconfigure(2, weight=1) 
        ctk.set_appearance_mode("System")
        ctk.set_default_color_theme("blue")
        
        # --- Font & Style Configuration ---
        self.main_font = ("Arial", 14)
        self.header_font = ("Arial", 18, "bold")

        self.setup_ui()

    def setup_ui(self):
        """Creates and places all the UI widgets in the window."""
        
        # --- Main Frame ---
        main_frame = ctk.CTkFrame(self)
        main_frame.grid(row=0, column=0, padx=20, pady=20, sticky="ew")
        main_frame.grid_columnconfigure(1, weight=1)

        # --- Header ---
        header_label = ctk.CTkLabel(main_frame, text="Bek Bookstore EPUB to PDF Converter", font=self.header_font)
        header_label.grid(row=0, column=0, columnspan=3, padx=10, pady=(10, 20))

        # --- Input Fields ---
        # EPUB URL
        ctk.CTkLabel(main_frame, text="EPUB URL:", font=self.main_font).grid(row=1, column=0, padx=10, pady=5, sticky="w")
        self.epub_url_entry = ctk.CTkEntry(main_frame, width=400)
        self.epub_url_entry.grid(row=1, column=1, columnspan=2, padx=10, pady=5, sticky="ew")
        self.epub_url_entry.insert(0, "https://flibusta.is/b/416925/epub")

        # Cover Image
        ctk.CTkLabel(main_frame, text="Cover Image (URL/Path):", font=self.main_font).grid(row=2, column=0, padx=10, pady=5, sticky="w")
        self.cover_path_entry = ctk.CTkEntry(main_frame)
        self.cover_path_entry.grid(row=2, column=1, padx=10, pady=5, sticky="ew")
        self.cover_path_entry.insert(0, "https://flibusta.is/i/25/416925/cover.jpg")
        ctk.CTkButton(main_frame, text="Browse...", command=lambda: self.browse_file(self.cover_path_entry)).grid(row=2, column=2, padx=(0, 10), pady=5)

        # Title Page Image
        ctk.CTkLabel(main_frame, text="Title Page BG (URL/Path):", font=self.main_font).grid(row=3, column=0, padx=10, pady=5, sticky="w")
        self.title_bg_path_entry = ctk.CTkEntry(main_frame)
        self.title_bg_path_entry.grid(row=3, column=1, padx=10, pady=5, sticky="ew")
        self.title_bg_path_entry.insert(0, "https://bekbookstore.com/titlepage.jpg")
        ctk.CTkButton(main_frame, text="Browse...", command=lambda: self.browse_file(self.title_bg_path_entry)).grid(row=3, column=2, padx=(0, 10), pady=5)
        
        # Full Page Image
        ctk.CTkLabel(main_frame, text="Full Page Image (URL/Path):", font=self.main_font).grid(row=4, column=0, padx=10, pady=5, sticky="w")
        self.full_page_image_entry = ctk.CTkEntry(main_frame)
        self.full_page_image_entry.grid(row=4, column=1, padx=10, pady=5, sticky="ew")
        self.full_page_image_entry.insert(0, "https://bekbookstore.com/fullpageimage.jpg")
        ctk.CTkButton(main_frame, text="Browse...", command=lambda: self.browse_file(self.full_page_image_entry)).grid(row=4, column=2, padx=(0, 10), pady=5)


        # --- Settings Frame ---
        settings_frame = ctk.CTkFrame(self)
        settings_frame.grid(row=1, column=0, padx=20, pady=10, sticky="ew")
        settings_frame.grid_columnconfigure((0, 1, 2), weight=1)

        # Font Size
        ctk.CTkLabel(settings_frame, text="Font Size:", font=self.main_font).grid(row=0, column=0, padx=10, pady=10, sticky="w")
        self.font_size_slider = ctk.CTkSlider(settings_frame, from_=8, to=20, number_of_steps=12, command=self.update_slider_label)
        self.font_size_slider.set(13)
        self.font_size_slider.grid(row=1, column=0, padx=10, pady=5, sticky="ew")
        self.font_size_label = ctk.CTkLabel(settings_frame, text="13 pt")
        self.font_size_label.grid(row=2, column=0, padx=10, pady=(0,10))
        
        # Line Spacing
        ctk.CTkLabel(settings_frame, text="Line Spacing:", font=self.main_font).grid(row=0, column=1, padx=10, pady=10, sticky="w")
        self.line_spacing_slider = ctk.CTkSlider(settings_frame, from_=1.0, to=2.0, number_of_steps=10, command=self.update_slider_label)
        self.line_spacing_slider.set(1.5)
        self.line_spacing_slider.grid(row=1, column=1, padx=10, pady=5, sticky="ew")
        self.line_spacing_label = ctk.CTkLabel(settings_frame, text="1.5x")
        self.line_spacing_label.grid(row=2, column=1, padx=10, pady=(0,10))

        # Margin Size
        ctk.CTkLabel(settings_frame, text="Page Margin:", font=self.main_font).grid(row=0, column=2, padx=10, pady=10, sticky="w")
        self.margin_slider = ctk.CTkSlider(settings_frame, from_=0.5, to=1.5, number_of_steps=10, command=self.update_slider_label)
        self.margin_slider.set(1.0)
        self.margin_slider.grid(row=1, column=2, padx=10, pady=5, sticky="ew")
        self.margin_label = ctk.CTkLabel(settings_frame, text='1.00"')
        self.margin_label.grid(row=2, column=2, padx=10, pady=(0,10))
        
        # --- Status and Controls ---
        self.status_log = ctk.CTkTextbox(self, font=self.main_font, height=200, state="disabled")
        self.status_log.grid(row=2, column=0, padx=20, pady=10, sticky="nsew")

        self.progress_bar = ctk.CTkProgressBar(self, mode='determinate')
        self.progress_bar.grid(row=3, column=0, padx=20, pady=10, sticky="ew")
        self.progress_bar.set(0)

        self.convert_button = ctk.CTkButton(self, text="Convert to PDF", command=self.start_conversion_thread, font=self.header_font, height=40)
        self.convert_button.grid(row=4, column=0, padx=20, pady=(10, 20), sticky="ew")
        
        self.update_slider_label() # Update labels on startup

    def update_slider_label(self, value=None):
        """Updates the labels for the settings sliders."""
        self.font_size_label.configure(text=f"{int(self.font_size_slider.get())} pt")
        self.line_spacing_label.configure(text=f"{self.line_spacing_slider.get():.1f}x")
        self.margin_label.configure(text=f'{self.margin_slider.get():.2f}"')

    def browse_file(self, entry_widget):
        """Opens a file dialog and inserts the selected path into an entry widget."""
        filepath = filedialog.askopenfilename(
            title="Select an Image File",
            filetypes=(("Image Files", "*.jpg *.jpeg *.png *.gif"), ("All files", "*.*"))
        )
        if filepath:
            entry_widget.delete(0, 'end')
            entry_widget.insert(0, filepath)

    def log_status(self, message, clear=False):
        """Adds a message to the status log on the main thread."""
        def _log():
            self.status_log.configure(state="normal")
            if clear:
                self.status_log.delete("1.0", "end")
            self.status_log.insert("end", message + "\n")
            self.status_log.see("end") # Auto-scroll
            self.status_log.configure(state="disabled")
        self.after(0, _log)

    def set_progress(self, value):
        """Sets the progress bar value on the main thread."""
        self.after(0, lambda: self.progress_bar.set(value))

    def start_conversion_thread(self):
        """Starts the PDF conversion in a separate thread to keep the GUI responsive."""
        self.log_status("Starting conversion...", clear=True)
        self.convert_button.configure(state="disabled", text="Converting...")
        self.set_progress(0)

        # Gather inputs from the GUI
        params = {
            "epub_url": self.epub_url_entry.get(),
            "cover_input": self.cover_path_entry.get(),
            "title_page_bg_input": self.title_bg_path_entry.get(),
            "full_page_image_input": self.full_page_image_entry.get(),
            "font_size": int(self.font_size_slider.get()),
            "line_spacing": self.line_spacing_slider.get(),
            "margin_size": self.margin_slider.get(),
            "status_callback": self.log_status,
            "progress_callback": self.set_progress,
        }

        conversion_thread = threading.Thread(target=self.run_conversion, kwargs=params)
        conversion_thread.daemon = True
        conversion_thread.start()

    def conversion_finished(self, success, message):
        """Callback to run on the main thread after conversion is complete."""
        self.log_status(message)
        self.set_progress(1.0 if success else self.progress_bar.get())
        self.convert_button.configure(state="normal", text="Convert to PDF")

    def run_conversion(self, epub_url, cover_input, title_page_bg_input, full_page_image_input, font_size, line_spacing, margin_size, status_callback, progress_callback):
        """The main conversion logic, adapted to run in a thread and report progress."""
        try:
            # --- FONT CHECK ---
            font_path = resource_path("DejaVuSans.ttf")
            if not os.path.exists(font_path):
                raise FileNotFoundError("DejaVuSans.ttf not found! Ensure it's in the same folder as the application.")
            
            pdfmetrics.registerFont(TTFont('DejaVu-Sans', font_path))
            progress_callback(0.05)

            # --- FETCH EPUB ---
            status_callback("📥 Fetching and processing EPUB file...")
            response = requests.get(epub_url)
            response.raise_for_status()
            
            epub_path = os.path.join(tempfile.gettempdir(), "book.epub")
            with open(epub_path, 'wb') as f:
                f.write(response.content)
            book = epub.read_epub(epub_path)
            progress_callback(0.15)
            
            # Extract metadata
            book_title, author_name, book_description = "Unknown Title", "Unknown Author", "No description found."
            if book.get_metadata('DC', 'title'): book_title = book.get_metadata('DC', 'title')[0][0]
            if book.get_metadata('DC', 'creator'): author_name = book.get_metadata('DC', 'creator')[0][0]
            if book.get_metadata('DC', 'description'):
                raw_desc = book.get_metadata('DC', 'description')[0][0]
                book_description = html.unescape(re.sub('<[^<]+?>', '', raw_desc))

            status_callback(f"📖 Processing '{book_title}' by {author_name}.")
            
            # Map content and images
            toc_items = self.flatten_toc(book.toc)
            content_map = {item.get_name(): item.get_content() for item in book.get_items_of_type(ITEM_DOCUMENT)}
            image_map = {os.path.basename(item.get_name()): item.get_content() for item in book.get_items_of_type(ITEM_IMAGE)}
            progress_callback(0.25)

            # --- PROCESS IMAGES ---
            status_callback("🖼️ Preparing images...")
            temp_dir = tempfile.gettempdir()
            cover_path = self.get_image_path(cover_input, "cover.jpg", temp_dir, status_callback)
            title_bg_path = self.get_image_path(title_page_bg_input, "title_bg.jpg", temp_dir, status_callback)
            
            full_page_image_path = None
            if full_page_image_input:
                full_page_image_path = self.get_image_path(full_page_image_input, "full_page_image.jpg", temp_dir, status_callback)

            blurred_cover_path = os.path.join(temp_dir, "blurred_cover.jpg")
            with Image.open(cover_path) as img:
                img_resized = img.resize((int(letter[0]), int(letter[1])))
                img_resized.filter(ImageFilter.GaussianBlur(25)).save(blurred_cover_path)
            
            status_callback("✅ Images processed successfully.")
            progress_callback(0.35)

            # --- BUILD PDF STRUCTURE ---
            status_callback("🏗️ Building PDF structure...")
            safe_title = re.sub(r'[\\/*?:"<>|]', "", book_title)
            pdf_filename = f"{safe_title}.pdf"

            doc = BaseDocTemplate(pdf_filename, pagesize=letter)
            margin = margin_size * inch
            doc.leftMargin, doc.rightMargin, doc.topMargin, doc.bottomMargin = margin, margin, margin, margin

            page_drawer = PageDrawer(
                cover_path=cover_path, title_bg_path=title_bg_path, 
                blurred_cover_path=blurred_cover_path, 
                full_page_image_path=full_page_image_path,
                book_title=book_title, author_name=author_name,
                left_margin=doc.leftMargin, right_margin=doc.rightMargin,
                top_margin=doc.topMargin, bottom_margin=doc.bottomMargin
            )

            page_templates = [
                PageTemplate(id='CoverPage', frames=[Frame(0, 0, letter[0], letter[1])], onPage=page_drawer.cover_and_content_pages),
                PageTemplate(id='TitlePage', frames=[Frame(0, 0, letter[0], letter[1])], onPage=page_drawer.title_page_background),
                PageTemplate(id='ContentPage', frames=[Frame(doc.leftMargin, doc.bottomMargin, doc.width, doc.height)], onPage=page_drawer.cover_and_content_pages),
                PageTemplate(id='FinalPage', frames=[Frame(0, 0, letter[0], letter[1])], onPage=page_drawer.final_page_background)
            ]
            
            if full_page_image_path:
                page_templates.append(PageTemplate(id='FullImagePage', frames=[Frame(0, 0, letter[0], letter[1])], onPage=page_drawer.full_image_page_background))

            doc.addPageTemplates(page_templates)
            progress_callback(0.45)

            # --- ASSEMBLE PDF STORY ---
            status_callback("✒️ Assembling document content...")
            story = self.build_story(doc, book_title, author_name, book_description, toc_items, content_map, image_map, font_size, line_spacing, status_callback, bool(full_page_image_path))
            progress_callback(0.85)

            # --- GENERATE PDF ---
            status_callback("⏳ Generating PDF... This may take a few moments.")
            doc.build(story)
            
            # --- CLEANUP ---
            files_to_clean = [epub_path, cover_path, title_bg_path, blurred_cover_path, full_page_image_path]
            self.cleanup_temp_files(files_to_clean, temp_dir, status_callback)

            self.after(0, self.conversion_finished, True, f"✅ PDF generation complete! Saved as: {pdf_filename}")

        except Exception as e:
            self.after(0, self.conversion_finished, False, f"❌ An error occurred: {e}")

    # --- Helper methods for conversion logic ---
    def flatten_toc(self, toc_list):
        flat_list = []
        for item in toc_list:
            if isinstance(item, (list, tuple)):
                flat_list.extend(self.flatten_toc(item))
            elif isinstance(item, epub.Link):
                flat_list.append(item)
        return flat_list

    def get_image_path(self, image_input, temp_filename, temp_dir, status_callback):
        if not image_input: return None
        if image_input.startswith("http"):
            try:
                response = requests.get(image_input)
                response.raise_for_status()
                image_path = os.path.join(temp_dir, temp_filename)
                with open(image_path, 'wb') as f:
                    f.write(response.content)
                status_callback(f"   - Image downloaded: {os.path.basename(image_input)}")
                return image_path
            except requests.RequestException as e:
                raise IOError(f"Failed to download image {image_input}: {e}")
        else:
            if os.path.exists(image_input):
                status_callback(f"   - Using local image: {os.path.basename(image_input)}")
                return image_input
            else:
                raise FileNotFoundError(f"Image file not found: {image_input}")

    def build_story(self, doc, book_title, author_name, book_description, toc_items, content_map, image_map, font_size, line_spacing, status_callback, has_full_page_image):
        story = []
        styles = getSampleStyleSheet()
        leading = font_size * line_spacing
        
        body_style = ParagraphStyle('BodyText', parent=styles['Normal'], fontName='DejaVu-Sans', fontSize=font_size, leading=leading, alignment=TA_JUSTIFY)
        h1_style = ParagraphStyle('H1', parent=styles['h1'], fontName='DejaVu-Sans', fontSize=20, leading=24, spaceAfter=12, alignment=TA_CENTER)
        toc_style = ParagraphStyle('TOC', parent=styles['Normal'], fontName='DejaVu-Sans', fontSize=14, leading=18, leftIndent=inch*0.25)
        title_page_title_style = ParagraphStyle('TitlePageTitle', parent=styles['h1'], fontName='DejaVu-Sans', fontSize=30, textColor=colors.black, alignment=TA_CENTER)
        title_page_author_style = ParagraphStyle('TitlePageAuthor', parent=styles['Normal'], fontName='DejaVu-Sans', fontSize=18, textColor=colors.black, alignment=TA_CENTER, spaceBefore=12)
        description_style = ParagraphStyle('Description', parent=body_style, textColor=colors.white, backColor=colors.Color(0,0,0,0.6), alignment=TA_CENTER, borderPadding=20, borderRadius=15)
        
        story.append(NextPageTemplate('TitlePage'))
        story.append(PageBreak())

        title_page_content = [Spacer(1, 3*inch), Paragraph(book_title, title_page_title_style), Spacer(1, 0.25*inch), Paragraph(f"<i>{author_name}</i>", title_page_author_style)]
        story.append(KeepInFrame(letter[0], letter[1], title_page_content, vAlign='TOP'))
        story.append(NextPageTemplate('ContentPage'))
        story.append(PageBreak())

        toc_page_content = [Paragraph("Содержание", h1_style), Spacer(1, 0.25*inch)]
        chapter_content_story = []
        toc_links = []
        
        for i, item in enumerate(toc_items):
            bookmark_key = f'toc_entry_{i}'
            toc_links.append((item.title, bookmark_key))
            chapter_content_story.append(PageBreak())
            title_with_anchor = f'<a name="{bookmark_key}"/>{item.title}'
            chapter_content_story.append(Paragraph(title_with_anchor, h1_style))
            
            chapter_html = content_map.get(item.href.split('#')[0])
            if chapter_html:
                soup = BeautifulSoup(chapter_html, 'html.parser')
                for tag in soup.find_all(['p', 'img']):
                    if tag.name == 'p' and tag.get_text(strip=True):
                        chapter_content_story.append(Paragraph(tag.get_text(strip=True), body_style))
                        chapter_content_story.append(Spacer(1, 0.1 * inch))
                    elif tag.name == 'img' and tag.get('src'):
                        img_src_base = os.path.basename(tag['src'])
                        if img_src_base in image_map:
                            try:
                                img_data = io.BytesIO(image_map[img_src_base])
                                with Image.open(img_data) as pil_img:
                                    img_width, img_height = pil_img.size

                                # --- START OF CORRECTED IMAGE SCALING LOGIC ---
                                # Define a vertical buffer. This is crucial because a chapter title
                                # might be on the same page, reducing the available height. This
                                # buffer reserves space for the title.
                                V_BUFFER = 1 * inch 
                                max_width = doc.width
                                max_height = doc.height - V_BUFFER # Use buffered height

                                display_width = img_width
                                display_height = img_height

                                # Check if the image exceeds the buffered frame dimensions
                                if display_width > max_width or display_height > max_height:
                                    # Calculate the scaling ratio to fit within the buffered dimensions
                                    width_ratio = max_width / display_width
                                    height_ratio = max_height / display_height
                                    scale_ratio = min(width_ratio, height_ratio)

                                    # Apply the scaling
                                    display_width = display_width * scale_ratio
                                    display_height = display_height * scale_ratio
                                # --- END OF CORRECTED IMAGE SCALING LOGIC ---

                                img_data.seek(0)
                                rl_image = ReportLabImage(img_data, width=display_width, height=display_height)
                                chapter_content_story.append(rl_image)
                                chapter_content_story.append(Spacer(1, 0.2 * inch))
                            except Exception as e:
                                status_callback(f"⚠️ Warning: Could not process image {img_src_base}. Error: {e}")

        for title, key in toc_links:
            toc_page_content.append(Paragraph(f'<a href="#{key}">{title}</a>', toc_style))

        story.extend(toc_page_content)
        story.extend(chapter_content_story)
        
        if has_full_page_image:
            story.append(NextPageTemplate('FullImagePage'))
            story.append(PageBreak())

        story.append(NextPageTemplate('FinalPage'))
        story.append(PageBreak())
        final_page_content = [Spacer(1, (letter[1] / 2) - 2*inch), Paragraph(book_description, description_style)]
        story.append(KeepInFrame(letter[0] - 2*inch, letter[1], final_page_content, hAlign='CENTER', vAlign='MIDDLE'))

        return story

    def cleanup_temp_files(self, file_paths, temp_dir, status_callback):
        status_callback("🧹 Cleaning up temporary files...")
        for path in file_paths:
            if path and path.startswith(temp_dir) and os.path.exists(path):
                try:
                    os.remove(path)
                except OSError: pass
        if os.path.exists("book.epub"): os.remove("book.epub")
        status_callback("🧹 Cleanup complete.")


class PageDrawer:
    """Helper class to manage data for ReportLab's onPage functions."""
    def __init__(self, cover_path, title_bg_path, blurred_cover_path, full_page_image_path, book_title, author_name, left_margin, right_margin, top_margin, bottom_margin):
        self.cover_path = cover_path
        self.title_page_bg_path = title_bg_path
        self.blurred_cover_path = blurred_cover_path
        self.full_page_image_path = full_page_image_path
        self.book_title = book_title
        self.author_name = author_name
        self.left_margin = left_margin
        self.right_margin = right_margin
        self.top_margin = top_margin
        self.bottom_margin = bottom_margin

    def cover_and_content_pages(self, canvas, doc):
        canvas.saveState()
        page_width, page_height = letter
        page_num = canvas.getPageNumber()

        if page_num == 1: # Cover Page
            canvas.drawImage(self.cover_path, 0, 0, width=page_width, height=page_height, preserveAspectRatio=False)
        elif page_num > 2: # Content Pages (skip title page)
            canvas.setFont('DejaVu-Sans', 9)
            header_y = page_height - self.top_margin + inch * 0.15
            
            # CORRECTED: Alternating alignment starting with left on page 3
            if page_num % 2 != 0: # Odd pages (3, 5, ...) are left-aligned
                canvas.drawString(self.left_margin, header_y, self.author_name)
            else: # Even pages (4, 6, ...) are right-aligned
                canvas.drawRightString(page_width - self.right_margin, header_y, self.book_title)
            
            if page_num > 3:
                canvas.drawCentredString(page_width / 2.0, self.bottom_margin - inch * 0.25, str(page_num - 3))
        canvas.restoreState()

    def title_page_background(self, canvas, doc):
        canvas.saveState()
        canvas.drawImage(self.title_page_bg_path, 0, 0, width=letter[0], height=letter[1], preserveAspectRatio=False)
        canvas.restoreState()

    def full_image_page_background(self, canvas, doc):
        canvas.saveState()
        if self.full_page_image_path and os.path.exists(self.full_page_image_path):
            canvas.drawImage(self.full_page_image_path, 0, 0, width=letter[0], height=letter[1], preserveAspectRatio=False)
        canvas.restoreState()

    def final_page_background(self, canvas, doc):
        canvas.saveState()
        canvas.drawImage(self.blurred_cover_path, 0, 0, width=letter[0], height=letter[1], preserveAspectRatio=False)
        canvas.restoreState()


if __name__ == "__main__":
    app = EpubToPdfConverter()
    app.mainloop()